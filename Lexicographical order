Problem Explanation:

The task is to find the next lexicographically greater permutation of a given array of integers nums. Lexicographical 
order means dictionary order. For example, [1, 2, 3] is smaller in lexicographical order than [1, 3, 2].

Approach:

To solve this problem, we can follow these steps:

Identify Pivot Point: Traverse the array from right to left to find the first pair of consecutive numbers where the left
number is less than the right number. Let's call the index of the left number as pivotIndex. If no such pair exists, the array 
is in descending order, and it's the last permutation.

Find Successor to Pivot: After identifying the pivotIndex, we need to find the smallest number on the right of pivotIndex that
is larger than nums[pivotIndex]. Let's call the index of this number as successorIndex.

Swap Pivot and Successor: Swap the numbers at pivotIndex and successorIndex.

Reverse the Remaining Sequence: Finally, reverse the subarray to the right of pivotIndex to get the next permutation.


import java.util.*
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        // Input array elements
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        // Step 1: Find the pivot index
        int pivot = -1;
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] < arr[i + 1]) {
                pivot = i;
                break;
            }
        }
        if (pivot == -1) {
            // If no pivot index found, reverse the entire array
            reverseArray(arr, 0, n - 1);
        } else {
            // Step 2: Find the successor to the pivot
            int successor = -1;
            for (int i = n - 1; i > pivot; i--) {
                if (arr[i] > arr[pivot]) {
                    successor = i;
                    break;
                }
            }
            // Step 3: Swap pivot and successor
            int temp = arr[pivot];
            arr[pivot] = arr[successor];
            arr[successor] = temp;
            
            // Step 4: Reverse the sequence from pivot + 1 to end
            reverseArray(arr, pivot + 1, n - 1);
        }
        
        // Output the next permutation
        System.out.println("Next Permutation:");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
    
    // Helper method to reverse a subarray arr[start...end] in place
    private static void reverseArray(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
}
